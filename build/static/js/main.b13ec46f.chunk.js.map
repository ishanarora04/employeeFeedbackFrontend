{"version":3,"sources":["components/Table/index.jsx","components/Button/index.jsx","lib/RequestManager.jsx","components/Form/index.jsx","App.js","serviceWorker.js","components/Feedback/Feedback.jsx","index.js"],"names":["Table","props","renderHeadingRow","headings","cells","elem","push","key","renderData","rows","output","subelem","className","this","Component","Button","onClick","text","ID","id","React","url","entity","request","method","responseType","data","EmployeeForm","handleChange","event","target","value","type","checked","name","setState","handleSubmit","e","a","preventDefault","state","email","RequestManager","document","getElementById","reset","updateTable","onSubmit","onChange","App","componentDidMount","fetchEmployees","fetch","then","response","json","employees","delete","_id","status","bind","console","log","row","style","textAlign","href","Boolean","window","location","hostname","match","Feedback","fetchEmployeesToAssign","length","undefined","from","to","feedback","generateDropDownOptions","cols","ReactDOM","render","StrictMode","path","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b13ec46f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./table.css\";\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  renderHeadingRow = () => {\n    const { headings } = this.props;\n    const cells = [];\n    for (const elem of headings) {\n      cells.push(<th key={elem}>{elem}</th>);\n    }\n    return cells;\n  };\n  renderData = () => {\n    const { rows } = this.props;\n    const output = [];\n    for (const elem of rows) {\n      const cells = [];\n      for (const subelem in elem) {\n        cells.push(<td key={elem[subelem]}>{elem[subelem]}</td>);\n      }\n      output.push(<tr>{cells}</tr>);\n    }\n    return output;\n  };\n\n  render() {\n    return (\n      <div className=\"table card\">\n        <table>\n          <tr>\n          {this.renderHeadingRow()}\n          </tr>\n          <tbody>{this.renderData()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './button.css';\n\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const { onClick, text, ID } = this.props;\n\n    return (\n      <div>\n        <button id={ID} onClick={onClick}>\n          {text}\n        </button>\n      </div>\n    );\n  }\n}\n","import request from \"axios\";\n\nexport default {\n  /**\n   * Retrieve list of entities from server using AJAX call.\n   *\n   * @returns {Promise} - Result of ajax call.\n   */\n  fetchEntities(url) {\n    return request({\n      method: \"GET\",\n      url,\n      responseType: \"json\",\n    });\n  },\n\n  submitEntity(url, entity, multipart = false) {\n    return request({\n      method: \"POST\",\n      url,\n      responseType: \"json\",\n      data: entity,\n    });\n  },\n\n  updateEntity(url, entity) {\n    return request({\n      method: \"PUT\",\n      url,\n      responseType: \"json\",\n      data: entity,\n    });\n  },\n\n  deleteEntity(url, entity) {\n    return request({\n      method: \"DELETE\",\n      url,\n      responseType: \"json\",\n      data: entity,\n    });\n  },\n};\n","import React, { Component } from \"react\";\nimport RequestManager from \"../../lib/RequestManager\";\n\nexport default class EmployeeForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    const url = \"http://localhost:3001/v1/employee\";\n    const entity = { name: this.state.name, email: this.state.email };\n    const employee = await RequestManager.submitEntity(url, entity);\n    document.getElementById(\"employeeForm\").reset();\n    this.props.updateTable();\n  };\n\n  render() {\n    return (\n      <div className=\"card\">\n        <form onSubmit={this.handleSubmit} id=\"employeeForm\">\n          <div className=\"form-row\">\n            <label>\n              Employee Name:{\" \"}\n              <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n            </label>\n          </div>\n          <div className=\"form-row\">\n            <label>\n              Employee Email:{\" \"}\n              <input type=\"text\" name=\"email\" onChange={this.handleChange} />\n            </label>\n          </div>\n          <div>\n            <input type=\"submit\" value=\"Add Employee\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\nimport Button from \"./components/Button\";\nimport RequestManager from \"./lib/RequestManager\";\nimport EmployeeForm from \"./components/Form\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employees: [],\n    };\n    this.updateTable = this.updateTable.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.fetchEmployees();\n  };\n\n  fetchEmployees = () => {\n    const apiUrl = \"https://tranquil-taiga-11364.herokuapp.com/v1/fetchEmployees\";\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((response) =>\n        this.setState({\n          employees: response.data,\n        })\n      );\n  };\n\n  delete = async (elem) => {\n    const url = `https://tranquil-taiga-11364.herokuapp.com/v1/employee`;\n    const data = { _id: elem };\n    let output = await RequestManager.deleteEntity(url, data);\n    if (output.status === 200) {\n      this.setState({ employees: [] });\n    }\n    this.fetchEmployees();\n  };\n  updateTable() {\n    console.log(\"called props\");\n    this.fetchEmployees();\n  }\n\n  render() {\n    const headings = [\"Name\", \"Email\", \"Feedback\", \"Delete\"];\n\n    const rows = [];\n\n    for (const elem of this.state.employees) {\n      const row = {};\n      row[\"name\"] = elem[\"name\"];\n      row[\"email\"] = elem[\"email\"];\n      row[\"update\"] = elem[\"feedback\"];\n      row[\"delete\"] = (\n        <Button\n          onClick={() => this.delete(elem[\"_id\"])}\n          text=\"Delete\"\n          ID={elem[\"_id\"]}\n        />\n      );\n      rows.push(row);\n    }\n    return (\n      <div className=\"App\">\n        <table>\n          <tr style={{ textAlign: \"right\" }}>\n            <a href=\"/feedback\">Feedback</a>\n          </tr>\n          <tr>\n            <Table headings={headings} rows={rows} />\n          </tr>\n          <tr></tr>\n          <tr>\n            <EmployeeForm updateTable={this.updateTable} />\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport RequestManager from \"../../lib/RequestManager\";\n\nexport default class Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { employees: [] };\n  }\n\n  componentDidMount() {\n    this.fetchEmployeesToAssign();\n  }\n\n  fetchEmployeesToAssign = () => {\n    const apiUrl = \"https://tranquil-taiga-11364.herokuapp.com/v1/fetchEmployeesToAssign?emp_id=5f1d6c1321c54464a647fbc8\";\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((response) =>\n        this.setState({\n          employees: response.data,\n          name: response.data.length > 0 ? response.data[0]._id : undefined,\n        })\n      );\n  };\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    const url = \"https://tranquil-taiga-11364.herokuapp.com/v1/feedback\";\n    const entity = {\n      from: \"5f1d6c1321c54464a647fbc8\",\n      to: this.state.name,\n      feedback: this.state.feedback,\n    };\n    const employee = await RequestManager.submitEntity(url, entity);\n    document.getElementById(\"feedbackForm\").reset();\n    this.fetchEmployeesToAssign();\n  };\n\n  render() {\n    const generateDropDownOptions = [];\n\n    for (const elem of this.state.employees) {\n      generateDropDownOptions.push(\n        <option value={elem._id}>{elem.email}</option>\n      );\n    }\n    let text = ``;\n    if (this.state.employees.length == 0){\n        text = 'No employees left for feedback';\n    }\n\n    return (\n      <div className=\"card\">\n        <tr style={{ textAlign: \"right\" }}>\n          <a href=\"/app\">App</a>\n        </tr>\n        {text}\n        <hr/>\n        <form onSubmit={this.handleSubmit} id=\"feedbackForm\">\n          <div className=\"\">\n            <label>Employee List:</label>\n            <select name=\"name\" onChange={this.handleChange}>\n              {generateDropDownOptions}\n            </select>\n          </div>\n          <div className=\"form-row\">\n            <label>\n              Feedback:{\" \"}\n              <textarea\n                type=\"text\"\n                rows=\"10\"\n                cols=\"30\"\n                name=\"feedback\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n          <div>\n            <input type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Feedback from './components/Feedback/Feedback';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path={\"/feedback\"} >\n          <Feedback />\n        </Route>\n        <Route path={\"/\"} >\n          <App />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}